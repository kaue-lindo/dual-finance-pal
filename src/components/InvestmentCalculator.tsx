import React, { useState } from 'react';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { useToast } from "@/components/ui/use-toast"
import { Investment } from '@/context/finance/types';
import { useFinance } from '@/context/FinanceContext';

interface InvestmentCalculatorProps {
  onClose?: () => void;
}

const InvestmentCalculator: React.FC<InvestmentCalculatorProps> = ({ onClose }) => {
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');
  const [rate, setRate] = useState('');
  const [periodType, setPeriodType] = useState<'monthly' | 'annual'>('monthly');
  const [isCompound, setIsCompound] = useState(true);
  const { toast } = useToast();
  const { addInvestment, fetchTransactions } = useFinance();

  const handleAddInvestment = async () => {
  try {
    // Create a new investment without ID (will be generated by the database)
    const newInvestment: Omit<Investment, 'id'> = {
      description,
      amount: parseFloat(amount),
      rate: parseFloat(rate),
      period: periodType as 'monthly' | 'annual',
      startDate: new Date(),
      isCompound: isCompound
    };
    
    await addInvestment(newInvestment);
    
    // Reset form after successful submission
    setDescription('');
    setAmount('');
    setRate('');
    setPeriodType('monthly');
    setIsCompound(true);
    
    toast.success('Investimento adicionado com sucesso!');
    
    // Refresh data
    fetchTransactions();
    
    // Optionally close the dialog or navigate to another screen
    onClose && onClose();
  } catch (error) {
    console.error('Error adding investment:', error);
    toast.error('Erro ao adicionar investimento');
  }
};

  return (
    <div className="grid gap-4">
      <div className="space-y-2">
        <Label htmlFor="description">Descrição</Label>
        <Input
          id="description"
          placeholder="Ex: Tesouro Selic"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="amount">Valor Inicial</Label>
        <Input
          id="amount"
          placeholder="Ex: 1000"
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="rate">Taxa de Juros (%)</Label>
        <Input
          id="rate"
          placeholder="Ex: 12.75"
          type="number"
          value={rate}
          onChange={(e) => setRate(e.target.value)}
        />
      </div>
      <div className="space-y-2">
        <Label>Período</Label>
        <Select value={periodType} onValueChange={setPeriodType}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Selecione o período" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="monthly">Mensal</SelectItem>
            <SelectItem value="annual">Anual</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div className="flex items-center space-x-2">
        <Checkbox
          id="compound"
          checked={isCompound}
          onCheckedChange={setIsCompound}
        />
        <Label htmlFor="compound">Juros Compostos</Label>
      </div>
      <Button className="w-full" onClick={handleAddInvestment}>
        Adicionar Investimento
      </Button>
    </div>
  );
};

export default InvestmentCalculator;
